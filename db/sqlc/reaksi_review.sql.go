// Code generated by sqlc. DO NOT EDIT.
// source: reaksi_review.sql

package db

import (
	"context"
)

const createReaksiReview = `-- name: CreateReaksiReview :exec
INSERT INTO reaksi_review(
    tipe_reaksi,review_id, user_id 
)VALUES(
    ?,?,?
)
`

type CreateReaksiReviewParams struct {
	TipeReaksi string `json:"tipe_reaksi"`
	ReviewID   int32  `json:"review_id"`
	UserID     int32  `json:"user_id"`
}

func (q *Queries) CreateReaksiReview(ctx context.Context, arg CreateReaksiReviewParams) error {
	_, err := q.db.ExecContext(ctx, createReaksiReview, arg.TipeReaksi, arg.ReviewID, arg.UserID)
	return err
}

const getReaksiReview = `-- name: GetReaksiReview :many
SELECT id, tipe_reaksi, review_id, user_id FROM reaksi_review
`

func (q *Queries) GetReaksiReview(ctx context.Context) ([]ReaksiReview, error) {
	rows, err := q.db.QueryContext(ctx, getReaksiReview)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReaksiReview
	for rows.Next() {
		var i ReaksiReview
		if err := rows.Scan(
			&i.ID,
			&i.TipeReaksi,
			&i.ReviewID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReaksiReview = `-- name: UpdateReaksiReview :exec
UPDATE reaksi_review SET tipe_reaksi =?, review_id =?, user_id =? WHERE id =?
`

type UpdateReaksiReviewParams struct {
	TipeReaksi string `json:"tipe_reaksi"`
	ReviewID   int32  `json:"review_id"`
	UserID     int32  `json:"user_id"`
	ID         int32  `json:"id"`
}

func (q *Queries) UpdateReaksiReview(ctx context.Context, arg UpdateReaksiReviewParams) error {
	_, err := q.db.ExecContext(ctx, updateReaksiReview,
		arg.TipeReaksi,
		arg.ReviewID,
		arg.UserID,
		arg.ID,
	)
	return err
}
