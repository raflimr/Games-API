// Code generated by sqlc. DO NOT EDIT.
// source: kategori.sql

package db

import (
	"context"
)

const createKategori = `-- name: CreateKategori :exec
INSERT INTO kategori(
    nama, deskripsi
)VALUES(
    ?,?
)
`

type CreateKategoriParams struct {
	Nama      string `json:"nama"`
	Deskripsi string `json:"deskripsi"`
}

func (q *Queries) CreateKategori(ctx context.Context, arg CreateKategoriParams) error {
	_, err := q.db.ExecContext(ctx, createKategori, arg.Nama, arg.Deskripsi)
	return err
}

const deleteKategori = `-- name: DeleteKategori :exec
DELETE FROM kategori WHERE id =?
`

func (q *Queries) DeleteKategori(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteKategori, id)
	return err
}

const getKategori = `-- name: GetKategori :many
SELECT id, nama, deskripsi FROM kategori
`

func (q *Queries) GetKategori(ctx context.Context) ([]Kategori, error) {
	rows, err := q.db.QueryContext(ctx, getKategori)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Kategori
	for rows.Next() {
		var i Kategori
		if err := rows.Scan(&i.ID, &i.Nama, &i.Deskripsi); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateKategori = `-- name: UpdateKategori :exec
UPDATE kategori SET nama = ?, deskripsi =? WHERE id =?
`

type UpdateKategoriParams struct {
	Nama      string `json:"nama"`
	Deskripsi string `json:"deskripsi"`
	ID        int32  `json:"id"`
}

func (q *Queries) UpdateKategori(ctx context.Context, arg UpdateKategoriParams) error {
	_, err := q.db.ExecContext(ctx, updateKategori, arg.Nama, arg.Deskripsi, arg.ID)
	return err
}
