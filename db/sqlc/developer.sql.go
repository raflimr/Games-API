// Code generated by sqlc. DO NOT EDIT.
// source: developer.sql

package db

import (
	"context"
)

const createDeveloper = `-- name: CreateDeveloper :exec
INSERT INTO developer(
    logodev, kantor_pusat, pendiri, tahun_pendirian 
)VALUES(    
    ?,?,?,?
)
`

type CreateDeveloperParams struct {
	Logodev        string `json:"logodev"`
	KantorPusat    string `json:"kantor_pusat"`
	Pendiri        string `json:"pendiri"`
	TahunPendirian string `json:"tahun_pendirian"`
}

func (q *Queries) CreateDeveloper(ctx context.Context, arg CreateDeveloperParams) error {
	_, err := q.db.ExecContext(ctx, createDeveloper,
		arg.Logodev,
		arg.KantorPusat,
		arg.Pendiri,
		arg.TahunPendirian,
	)
	return err
}

const deleteDeveloper = `-- name: DeleteDeveloper :exec
DELETE FROM developer WHERE id =?
`

func (q *Queries) DeleteDeveloper(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteDeveloper, id)
	return err
}

const listDeveloper = `-- name: ListDeveloper :many
SELECT id, logodev, kantor_pusat, pendiri, tahun_pendirian FROM developer
`

func (q *Queries) ListDeveloper(ctx context.Context) ([]Developer, error) {
	rows, err := q.db.QueryContext(ctx, listDeveloper)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Developer
	for rows.Next() {
		var i Developer
		if err := rows.Scan(
			&i.ID,
			&i.Logodev,
			&i.KantorPusat,
			&i.Pendiri,
			&i.TahunPendirian,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDeveloper = `-- name: UpdateDeveloper :exec
UPDATE developer SET logodev = ?, kantor_pusat = ?, pendiri =?, tahun_pendirian =? WHERE id =?
`

type UpdateDeveloperParams struct {
	Logodev        string `json:"logodev"`
	KantorPusat    string `json:"kantor_pusat"`
	Pendiri        string `json:"pendiri"`
	TahunPendirian string `json:"tahun_pendirian"`
	ID             int32  `json:"id"`
}

func (q *Queries) UpdateDeveloper(ctx context.Context, arg UpdateDeveloperParams) error {
	_, err := q.db.ExecContext(ctx, updateDeveloper,
		arg.Logodev,
		arg.KantorPusat,
		arg.Pendiri,
		arg.TahunPendirian,
		arg.ID,
	)
	return err
}
