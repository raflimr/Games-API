// Code generated by sqlc. DO NOT EDIT.
// source: review.sql

package db

import (
	"context"
	"time"
)

const createReview = `-- name: CreateReview :exec
INSERT INTO review(
    konten_review, tanggal_review, tipe, game_id, user_id
)VALUES(
    ?,now(),?,?,?
)
`

type CreateReviewParams struct {
	KontenReview string `json:"konten_review"`
	Tipe         string `json:"tipe"`
	GameID       int32  `json:"game_id"`
	UserID       int32  `json:"user_id"`
}

func (q *Queries) CreateReview(ctx context.Context, arg CreateReviewParams) error {
	_, err := q.db.ExecContext(ctx, createReview,
		arg.KontenReview,
		arg.Tipe,
		arg.GameID,
		arg.UserID,
	)
	return err
}

const deleteReview = `-- name: DeleteReview :exec
DELETE FROM review WHERE id = ?
`

func (q *Queries) DeleteReview(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteReview, id)
	return err
}

const getReview = `-- name: GetReview :many
SELECT
    r.id,
    r.konten_review,
    r.tanggal_review,
    r.tipe,
    r.game_id,
    r.user_id
FROM
    review r
`

func (q *Queries) GetReview(ctx context.Context) ([]Review, error) {
	rows, err := q.db.QueryContext(ctx, getReview)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Review
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ID,
			&i.KontenReview,
			&i.TanggalReview,
			&i.Tipe,
			&i.GameID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReview = `-- name: UpdateReview :exec
UPDATE review SET konten_review = ?, tanggal_review = ?, tipe = ?, game_id = ?, user_id = ? WHERE id =?
`

type UpdateReviewParams struct {
	KontenReview  string    `json:"konten_review"`
	TanggalReview time.Time `json:"tanggal_review"`
	Tipe          string    `json:"tipe"`
	GameID        int32     `json:"game_id"`
	UserID        int32     `json:"user_id"`
	ID            int32     `json:"id"`
}

func (q *Queries) UpdateReview(ctx context.Context, arg UpdateReviewParams) error {
	_, err := q.db.ExecContext(ctx, updateReview,
		arg.KontenReview,
		arg.TanggalReview,
		arg.Tipe,
		arg.GameID,
		arg.UserID,
		arg.ID,
	)
	return err
}
